<?php

declare(strict_types=1);

namespace Drupal\openrisk_navigator\Plugin\Field\FieldFormatter;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Field\FormatterBase;
use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Plugin implementation of the 'ai_markdown_formatter' formatter.
 *
 * @FieldFormatter(
 *   id = "ai_markdown_formatter",
 *   label = @Translation("AI Markdown to HTML"),
 *   description = @Translation("Converts AI-generated markdown content to HTML using Markdown Easy."),
 *   field_types = {
 *     "string_long",
 *     "text_long",
 *     "text_with_summary"
 *   }
 * )
 */
class AiMarkdownFormatter extends FormatterBase implements ContainerFactoryPluginInterface {

  /**
   * The markdown processor service.
   *
   * @var object|null
   */
  protected $markdownProcessor;

  /**
   * The module handler.
   *
   * @var \Drupal\Core\Extension\ModuleHandlerInterface
   */
  protected $moduleHandler;

  /**
   * Constructs an AiMarkdownFormatter object.
   *
   * @param string $plugin_id
   *   The plugin_id for the formatter.
   * @param mixed $plugin_definition
   *   The plugin implementation definition.
   * @param \Drupal\Core\Field\FieldDefinitionInterface $field_definition
   *   The definition of the field to which the formatter is associated.
   * @param array $settings
   *   The formatter settings.
   * @param string $label
   *   The formatter label display setting.
   * @param string $view_mode
   *   The view mode.
   * @param array $third_party_settings
   *   Any third party settings.
   * @param object|null $markdownProcessor
   *   The markdown processor service.
   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
   *   The module handler.
   */
  public function __construct(
    $plugin_id,
    $plugin_definition,
    $field_definition,
    array $settings,
    $label,
    $view_mode,
    array $third_party_settings,
    $markdownProcessor,
    $moduleHandler
  ) {
    parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $label, $view_mode, $third_party_settings);
    $this->markdownProcessor = $markdownProcessor;
    $this->moduleHandler = $moduleHandler;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
    // Get the actual Markdown Easy utility service
    $moduleHandler = $container->get('module_handler');
    $markdownProcessor = null;
    
    // Check if markdown_easy module exists and get its utility service
    if ($moduleHandler->moduleExists('markdown_easy') && $container->has('markdown_easy.utility')) {
      $markdownProcessor = $container->get('markdown_easy.utility');
    }

    return new static(
      $configuration['plugin_id'] ?? $plugin_id,
      $plugin_definition,
      $configuration['field_definition'],
      $configuration['settings'],
      $configuration['label'],
      $configuration['view_mode'],
      $configuration['third_party_settings'],
      $markdownProcessor,
      $moduleHandler
    );
  }

  /**
   * {@inheritdoc}
   */
  public static function defaultSettings() {
    return [
      'ai_content_indicator' => TRUE,
      'auto_detect_ai_content' => TRUE,
      'enable_security_filtering' => TRUE,
      'fallback_to_plain_text' => TRUE,
      'max_content_length' => 0,
      'trim_summary_length' => 0,
    ] + parent::defaultSettings();
  }

  /**
   * {@inheritdoc}
   */
  public function settingsForm(array $form, FormStateInterface $form_state) {
    $elements = parent::settingsForm($form, $form_state);

    $elements['ai_content_indicator'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Show AI content indicator'),
      '#description' => $this->t('Display a small indicator that this content was generated by AI.'),
      '#default_value' => $this->getSetting('ai_content_indicator'),
    ];

    $elements['auto_detect_ai_content'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Auto-detect AI content'),
      '#description' => $this->t('Only show AI indicator for content that appears to be AI-generated (recommended).'),
      '#default_value' => $this->getSetting('auto_detect_ai_content'),
      '#states' => [
        'visible' => [
          ':input[name="fields[risk_summary][settings_edit_form][settings][ai_content_indicator]"]' => ['checked' => TRUE],
        ],
      ],
    ];

    $elements['enable_security_filtering'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Enable security filtering'),
      '#description' => $this->t('Use Markdown Easy\'s built-in security filtering to prevent XSS attacks.'),
      '#default_value' => $this->getSetting('enable_security_filtering'),
    ];

    $elements['fallback_to_plain_text'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Fallback to plain text'),
      '#description' => $this->t('If Markdown Easy is not available, display as plain text instead of raw markdown.'),
      '#default_value' => $this->getSetting('fallback_to_plain_text'),
    ];

    $elements['max_content_length'] = [
      '#type' => 'number',
      '#title' => $this->t('Maximum content length'),
      '#description' => $this->t('Truncate content after this many characters. 0 for no limit.'),
      '#default_value' => $this->getSetting('max_content_length'),
      '#min' => 0,
    ];

    $elements['trim_summary_length'] = [
      '#type' => 'number',
      '#title' => $this->t('Summary length'),
      '#description' => $this->t('Show only first N characters as summary. 0 to show full content.'),
      '#default_value' => $this->getSetting('trim_summary_length'),
      '#min' => 0,
    ];

    return $elements;
  }

  /**
   * {@inheritdoc}
   */
  public function settingsSummary() {
    $summary = [];

    if ($this->getSetting('ai_content_indicator')) {
      $summary[] = $this->t('AI indicator: Enabled');
      
      if ($this->getSetting('auto_detect_ai_content')) {
        $summary[] = $this->t('Auto-detection: Enabled');
      }
    }

    if ($this->getSetting('enable_security_filtering')) {
      $summary[] = $this->t('Security filtering: Enabled');
    }

    if ($this->getSetting('max_content_length') > 0) {
      $summary[] = $this->t('Max length: @length chars', ['@length' => $this->getSetting('max_content_length')]);
    }

    if ($this->getSetting('trim_summary_length') > 0) {
      $summary[] = $this->t('Summary: @length chars', ['@length' => $this->getSetting('trim_summary_length')]);
    }

    // Markdown Easy is now a dependency - always available
    $summary[] = $this->t('âœ… Full markdown processing enabled');

    return $summary;
  }

  /**
   * {@inheritdoc}
   */
  public function viewElements(FieldItemListInterface $items, $langcode) {
    $elements = [];

    foreach ($items as $delta => $item) {
      $text = $item->value;
      
      if (empty($text)) {
        continue;
      }

      // Apply length limits if configured
      if ($this->getSetting('max_content_length') > 0) {
        $text = substr($text, 0, $this->getSetting('max_content_length'));
      }

      // Process the markdown content
      $processed_html = $this->processMarkdown($text, $langcode);

      // Apply summary trimming if configured
      if ($this->getSetting('trim_summary_length') > 0) {
        $processed_html = $this->trimHtmlToLength($processed_html, $this->getSetting('trim_summary_length'));
      }

      $element = [
        '#type' => 'markup',
        '#markup' => $processed_html,
        '#cache' => [
          'keys' => [
            'field',
            $this->fieldDefinition->getType(),
            $this->fieldDefinition->getName(),
            $this->viewMode,
            'ai_markdown_formatter',
            'delta-' . $delta,
          ],
          'contexts' => ['languages:language_interface'],
          'tags' => [
            'config:filter.format.markdown_easy',
            'loan_record:' . ($items->getEntity()->id() ?: 'new'),
          ],
          'max-age' => 0, // Disable caching for dynamic AI content
        ],
      ];

      // Add AI content indicator if enabled AND (auto-detect disabled OR content is AI-generated)
      $show_indicator = $this->getSetting('ai_content_indicator') && 
                       (!$this->getSetting('auto_detect_ai_content') || $this->isAiGeneratedContent($text));
      
      if ($show_indicator) {
        $element['#prefix'] = '<div class="ai-generated-content">';
        $element['#suffix'] = '<small class="ai-content-indicator">' . $this->t('AI Generated') . '</small></div>';
        $element['#attached']['library'][] = 'openrisk_navigator/ai_content_indicator';
      }

      $elements[$delta] = $element;
    }

    return $elements;
  }

  /**
   * Process markdown content to HTML.
   *
   * @param string $text
   *   The markdown text to process.
   * @param string $langcode
   *   The language code.
   *
   * @return string
   *   The processed HTML.
   */
  protected function processMarkdown(string $text, string $langcode): string {
    // First, check if Markdown Easy is available and working
    if ($this->isMarkdownEasyAvailable()) {
      try {
        $result = $this->processWithMarkdownEasy($text, $langcode);
        return $result;
      }
      catch (\Exception $e) {
        // Log the error and fall through to fallback
        \Drupal::logger('openrisk_navigator')->warning('Markdown Easy processing failed: @message', ['@message' => $e->getMessage()]);
      }
    }

    // Fallback processing
    $fallback_result = $this->processFallback($text);
    return $fallback_result;
  }

  /**
   * Process markdown using Markdown Easy.
   *
   * @param string $text
   *   The markdown text to process.
   * @param string $langcode
   *   The language code to use for processing.
   *
   * @return string
   *   The processed HTML.
   */
  protected function processWithMarkdownEasy(string $text, string $langcode = 'en'): string {
    // Use the injected markdown_easy.utility service
    if ($this->markdownProcessor) {
      // Try common method names
      if (method_exists($this->markdownProcessor, 'convertStringToMarkup')) {
        $result = $this->markdownProcessor->convertStringToMarkup($text);
        return $result->__toString();
      }
      elseif (method_exists($this->markdownProcessor, 'parse')) {
        return $this->markdownProcessor->parse($text);
      }
      elseif (method_exists($this->markdownProcessor, 'transform')) {
        return $this->markdownProcessor->transform($text);
      }
    }
    
    // Fallback to filter system if utility method not available
    if ($this->moduleHandler->moduleExists('markdown_easy')) {
      $filter_manager = \Drupal::service('plugin.manager.filter');
      
      if ($filter_manager->hasDefinition('markdown_easy')) {
        $filter = $filter_manager->createInstance('markdown_easy', [
          'settings' => [
            'markdown_library' => 'CommonMark',
            'flavor' => 'commonmark',
            'html_input' => $this->getSetting('enable_security_filtering') ? 'escape' : 'allow',
            'allow_unsafe_links' => !$this->getSetting('enable_security_filtering'),
          ],
        ]);
        
        return $filter->process($text, $langcode)->getProcessedText();
      }
    }

    throw new \Exception('Markdown Easy processing not available');
  }

  /**
   * Fallback processing when Markdown Easy is not available.
   *
   * @param string $text
   *   The markdown text to process.
   *
   * @return string
   *   The processed text.
   */
  protected function processFallback(string $text): string {
    if (!$this->getSetting('fallback_to_plain_text')) {
      // Return as-is with basic HTML escaping
      return '<pre>' . htmlspecialchars($text, ENT_QUOTES, 'UTF-8') . '</pre>';
    }

    // Convert markdown to basic HTML
    $html = $this->simpleMarkdownToHtml($text);
    return '<div class="ai-content-fallback">' . $html . '</div>';
  }

  /**
   * Simple markdown to HTML conversion for fallback.
   *
   * @param string $text
   *   The markdown text.
   *
   * @return string
   *   Basic HTML with formatting preserved.
   */
  protected function simpleMarkdownToHtml(string $text): string {
    // Escape HTML first
    $text = htmlspecialchars($text, ENT_QUOTES, 'UTF-8');
    
    // Convert markdown patterns to HTML
    $patterns = [
      // Headers
      '/^### (.+)$/m' => '<h3>$1</h3>',
      '/^## (.+)$/m' => '<h2>$1</h2>',
      '/^# (.+)$/m' => '<h1>$1</h1>',
      
      // Bold and italic
      '/\*\*(.+?)\*\*/' => '<strong>$1</strong>',
      '/\*(.+?)\*/' => '<em>$1</em>',
      
      // Links
      '/\[(.+?)\]\((.+?)\)/' => '<a href="$2">$1</a>',
      
      // Inline code
      '/`(.+?)`/' => '<code>$1</code>',
    ];

    foreach ($patterns as $pattern => $replacement) {
      $text = preg_replace($pattern, $replacement, $text);
    }
    
    // Handle numbered lists
    $text = preg_replace_callback('/^(\d+)\.\s+(.+)$/m', function($matches) {
      return '<ol><li>' . $matches[2] . '</li></ol>';
    }, $text);
    
    // Handle bullet lists (fix regex)
    $text = preg_replace_callback('/^[\-\*\+]\s+(.+)$/m', function($matches) {
      return '<ul><li>' . $matches[1] . '</li></ul>';
    }, $text);
    
    // Clean up adjacent list items
    $text = preg_replace('/<\/ol>\s*<ol>/', '', $text);
    $text = preg_replace('/<\/ul>\s*<ul>/', '', $text);
    
    // Convert line breaks to HTML
    $text = nl2br($text);
    
    return $text;
  }

  /**
   * Trim HTML content to specified length.
   *
   * @param string $html
   *   The HTML content.
   * @param int $length
   *   The maximum length.
   *
   * @return string
   *   The trimmed HTML.
   */
  protected function trimHtmlToLength(string $html, int $length): string {
    $text = strip_tags($html);
    if (strlen($text) <= $length) {
      return $html;
    }

    $trimmed = substr($text, 0, $length);
    return htmlspecialchars($trimmed, ENT_QUOTES, 'UTF-8') . '...';
  }

  /**
   * Check if Markdown Easy is available.
   *
   * @return bool
   *   TRUE if Markdown Easy is available and working.
   */
  protected function isMarkdownEasyAvailable(): bool {
    return $this->moduleHandler->moduleExists('markdown_easy') && 
           $this->markdownProcessor !== null;
  }

  /**
   * Detect if content was actually generated by AI.
   *
   * @param string $text
   *   The content to check.
   *
   * @return bool
   *   TRUE if content appears to be AI-generated.
   */
  protected function isAiGeneratedContent(string $text): bool {
    // Fallback content contains this specific phrase
    if (strpos($text, 'AI evaluation temporarily unavailable') !== FALSE) {
      return FALSE;
    }
    
    // Basic risk calculation fallback patterns
    if (preg_match('/^(Risk Level:|Basic Risk Level:)/', trim($text))) {
      return FALSE;
    }
    
    // AI-generated content typically has structured markdown formatting
    // Look for patterns that indicate AI generation
    $ai_indicators = [
      '/\d+\. \*\*Risk Label:/', // Numbered sections with bold
      '/\*\*Justification:\*\*/', // Bold justification headers
      '/\*\*Key Risk Factors/', // Bold risk factors headers
      '/\*\*Recommendations?:/', // Bold recommendations
      '/FICO Score.*below.*threshold/', // AI-style risk analysis language
    ];
    
    foreach ($ai_indicators as $pattern) {
      if (preg_match($pattern, $text)) {
        return TRUE;
      }
    }
    
    // If content is longer than 200 chars and has markdown formatting, likely AI
    if (strlen($text) > 200 && (strpos($text, '**') !== FALSE || strpos($text, '##') !== FALSE)) {
      return TRUE;
    }
    
    return FALSE;
  }

}
